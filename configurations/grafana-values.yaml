rbac:
  create: true
  pspEnabled: true
serviceAccount:
  create: true
  name: null
replicas: 1
deploymentStrategy: RollingUpdate
readinessProbe:
  httpGet:
    path: /api/health
    port: 3000
livenessProbe:
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 60
  timeoutSeconds: 30
  failureThreshold: 10
image:
  repository: grafana/grafana
  tag: 5.3.1
  pullPolicy: IfNotPresent
securityContext:
  runAsUser: 472
  fsGroup: 472
downloadDashboardsImage:
  repository: appropriate/curl
  tag: latest
  pullPolicy: IfNotPresent
service:
  type: LoadBalancer
  port: 80
  annotations: {}
  labels: {}
ingress:
  enabled: false
  annotations: {}
  labels: {}
  path: /
  hosts:
    - chart-example.local
  tls: []
resources: {}
nodeSelector: {}
tolerations: []
affinity: {}
persistence:
  enabled: true
  storageClassName: gp2
adminUser: admin
adminPassword: EKS!sAWSome
env: {}
envFromSecret: ''
extraSecretMounts: []
plugins: []
datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: 'http://prometheus-server.prometheus.svc.cluster.local'
        access: proxy
        isDefault: true
dashboardProviders: {}
dashboards: {}
dashboardsConfigMaps: {}
grafana.ini:
  paths:
    data: /var/lib/grafana/data
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  analytics:
    check_for_updates: true
  log:
    mode: console
  grafana_net:
    url: 'https://grafana.net'
ldap:
  existingSecret: ''
  config: ''
smtp:
  existingSecret: ''
sidecar:
  image: 'kiwigrid/k8s-sidecar:0.0.3'
  imagePullPolicy: IfNotPresent
  resources: null
  dashboards:
    enabled: false
    label: grafana_dashboard
    folder: /tmp/dashboards
  datasources:
    enabled: false
    label: grafana_datasource
